<div data-bind="
            event: {'wheel': resize}, fadeDelete: hideMainForm"
            style="border:0px; height:150px;width:150px;background-position: 50% 5%; left:40%; top:40%;" class="drag drop circle person">

                <!--<div data-bind="pos: icon.location, style: {'backgroundImage': icon.url}
                , jqCss: {'opacity': icon.opacity()}
                , event: {'dblclick': function(data, e){toggleMainForm(); e.cancelBubble = true; if (e.stopPropagation) e.stopPropagation(); return false}, dblclickBubble: false }" style="width:50px; height: 50px; background-repeat: no-repeat; background-position: center;">
                -->
                <!--<img border="0" src="/media/img/female48x48" style="position:absolute;left:50%;top:5%;" data-bind-service="click: function(){vm.showMainForm(true)}" class=""> 
                      
                    </img>,
                            beforeRemove: function(elem) { $(elem).slideUp() },
                            afterAdd: function(elem) { $(elem).hide().slideDown() }-->
                <!--</div>-->

        <div data-bind="eventJq: {
            dragxselect: {data: getSettings, func: select },
            dragxinit: {data: getSettings, func: dragxinit },
            dragxstart: {data: getSettings, func: dragxstart },
            dragx: {data: getSettings, func: dragx },
            dragxend: {data: getSettings, func: dragxend },
            dropxstart: {data: getSettings, func: dropxstart },
            dropxover: {data: getSettings, func: dropxover },
            dropxout: {data: getSettings, func: dropxout },
            dropx: {data: getSettings, func: function(){dropx.apply(this, arguments); __droppedOn(arguments, true);} },
            dropxselect: {data: getSettings, func: dropxselect },           
            dropxend: {data: getSettings, func: dropxend }
            }, style: {'backgroundImage': icon.url}, fadeIn: showMainForm" style="display: none;background-position: 50% 0%; background-repeat:no-repeat;" class="drag drop entry-form center">
        <div 
                class="" style="padding:30px;width:400px;">
                <p>&nbsp;</p>
                <!--<p>
                <div data-bind='foreach: model().missingFields()'>
                    <div data-bind='text: field'></div> 
                </div>
 

                </p>-->
                <p>     <label>     Tax ID    <input type="text" data-bind="value: model().id" />              </label>   </p>
                <!--<div data-bind="text:   ctx.id" />-->
        </div>
            <a href="#" data-bind="click: close" class="button button-blue">
                <span>OK</span>
            </a>
        </div>
        <!--<div data-bind="template:  { name: 'account', 
                foreach: model().serviceMethods(),
                afterRender: function(elems) { postRender(elems, that); },
                beforeRemove: function(elem) { $(elem).hide() },
                afterAdd: function(elem) { $(elem).hide().slideDown() },
                templateOptions: { viewModel: that} }, visible: isExpanded">

        </div>-->
    </div><!--eventJq: {
            dragxselect: {data: function(){return $.extend(getSettings(), {drop: false})}, func: select },
            dragxinit: {data: function(){return $.extend(getSettings(), {drop: false})}, func: dragxinit },
            dragxstart: {data: function(){return $.extend(getSettings(), {drop: false})}, func: dragxstart },
            dragx: {data: function(){return $.extend(getSettings(), {drop: false})}, func: dragx },
            dragxend: {data: function(){return $.extend(getSettings(), {drop: false})}, func: dragxend },
            dropxstart: {data: function(){return $.extend(getSettings(), {drop: false})}, func: dropxstart },
            dropxstart: {data: getSettings, func: dropxstart },
            dropxover: {data: getSettings, func: dropxover },
            dropxout: {data: getSettings, func: dropxout },
            dropx: {data: getSettings, func: function(){dropx.apply(this, arguments); __droppedOn(arguments, true);} },
            dropxselect: {data: getSettings, func: dropxselect },           
            dropxend: {data: getSettings, func: dropxend }
            }, -->