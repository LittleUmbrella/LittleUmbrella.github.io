<div data-bind="eventJq: {
            dragxselect: {data: getSettings, func: select },
            dragxinit: {data: getSettings, func: dragxinit },
            dragxstart: {data: getSettings, func: dragxstart },
            dragx: {data: getSettings, func: dragx },
            dragxend: {data: getSettings, func: dragxend },
            dropxstart: {data: getSettings, func: dropxstart },
            dropxover: {data: getSettings, func: dropxover },
            dropxout: {data: getSettings, func: dropxout },
            dropx: {data: getSettings, func: function(){dropx.apply(this, arguments); __droppedOn(arguments, true);} },
            dropxselect: {data: getSettings, func: dropxselect },           
            dropxend: {data: getSettings, func: dropxend }
            }
            , event: {'dblclick': function(data, e){toggleChildrenVisible(); e.cancelBubble = true; if (e.stopPropagation) e.stopPropagation(); return false}, dblclickBubble: false } 
            , fadeDelete: deleteNow"
            style="height:150px;width:150px;background-position: 50% 5%; left:40%; top:40%;" class="drag drop circle person">
                
                <div data-bind="onTop:onTop, pos: icon.location, style: {'backgroundImage': icon.url}
                , jqCss: {'opacity': icon.opacity()}
                , event: {'dblclick': function(data, e){toggleMainForm(); e.cancelBubble = true; if (e.stopPropagation) e.stopPropagation(); return false}, dblclickBubble: false }" style="width:50px; height: 50px; background-repeat: no-repeat; background-position: center;">
                <!--<img border="0" src="/media/img/female48x48" style="position:absolute;left:50%;top:5%;" data-bind-service="click: function(){vm.showMainForm(true)}" class=""> 
                      
                    </img>,
                            beforeRemove: function(elem) { $(elem).slideUp() },
                            afterAdd: function(elem) { $(elem).hide().slideDown() }-->
                </div>

                <div class="wrapper">
                <div class="floater">
                        <div class="center-container" >  
                            <div data-bind="text: model().firstName() + ' ' + model().lastName() "></div>          
                            
                        </div>
           
                    </div>
                    </div>

        <div data-bind="fadeToggle: hideMainForm" style="display: none;" class="drag drop entry-form center person">
        <div 
                class="" style="background-position: 50% 5%; ">
                <p>&nbsp;</p>
                <div data-bind='foreach: model().missingFields()'>
                    <div data-bind='text: field'></div> 
                </div>
 

                <p>     <label>     Tax ID    <input type="text" data-bind="value: model().id" />              </label>   </p>
                <!--<div data-bind="text:   ctx.id" />-->
        </div>
            <a href="#" data-bind="click: close" class="button button-blue">
                <span>OK</span>
            </a>
        </div>
        <!-- ko with: customerPurseViewModel-->
            <div data-bind="eventJq: {
            dragxselect: {data: getSettings, func: select },
            dragxinit: {data: getSettings, func: dragxinit },
            dragxstart: {data: getSettings, func: dragxstart },
            dragx: {data: getSettings, func: dragx },
            dragxend: {data: getSettings, func: dragxend },
            dropxstart: {data: getSettings, func: dropxstart },
            dropxover: {data: getSettings, func: dropxover },
            dropxout: {data: getSettings, func: dropxout },
            dropx: {data: getSettings, func: function(){dropx.apply(this, arguments); __droppedOn(arguments, true);} },
            dropxselect: {data: getSettings, func: dropxselect },           
            dropxend: {data: getSettings, func: dropxend }
            }
            ,
            fadeToggle: $parent.hideChildren
            , style: {'left': location().left +'px'
            ,'top': location().top +'px'
            ,'width': dimensions().width +'px'
            ,'height': dimensions().height +'px'
            ,'backgroundImage': icon.url}
            , busy: isBusy
            , infoize: 'Wallet'
            , event: {'dblclick': function(data, e){dblclick(data, e); e.cancelBubble = true; if (e.stopPropagation) e.stopPropagation(); return false}, dblclickBubble: false }"
             
            class="drag drop service circle"             
            style='display:none'>
            </div>
            <!-- /ko -->
        <!-- ko with: customerAccountsViewModel-->
            <div data-bind="onTop: onTop, eventJq: {
            dragxselect: {data: getSettings, func: select },
            dragxinit: {data: getSettings, func: dragxinit },
            dragxstart: {data: getSettings, func: dragxstart },
            dragx: {data: getSettings, func: dragx },
            dragxend: {data: getSettings, func: dragxend },
            dropxstart: {data: getSettings, func: dropxstart },
            dropxover: {data: getSettings, func: dropxover },
            dropxout: {data: getSettings, func: dropxout },
            dropx: {data: getSettings, func: function(){dropx.apply(this, arguments); __droppedOn(arguments, true);} },
            dropxselect: {data: getSettings, func: dropxselect },           
            dropxend: {data: getSettings, func: dropxend }
            }
            , css: {'circle-shadow': !hideChildren()}
            ,
            fadeToggle: $parent.hideChildren
            , style: {'left': location().left +'px'
            ,'top': location().top +'px'
            ,'width': dimensions().width +'px'
            ,'height': dimensions().height +'px'
            ,'backgroundImage': icon.url}
            , busy: isBusy
            , infoize: $parent.productsInfo
            , event: {'dblclick': function(data, e){dblclick(data, e); e.cancelBubble = true; if (e.stopPropagation) e.stopPropagation(); return false}, dblclickBubble: false }"
             
            class="drag drop service circle"             
            style='display:none'>
            
               <div data-bind="foreach: accountViewModels, event: {'mouseover': function(data, e){e.cancelBubble = true; if (e.stopPropagation) e.stopPropagation(); return false;}}">
            <div data-bind="eventJq: {
            dragxselect: {data: getSettings, func: select },
            dragxinit: {data: getSettings, func: dragxinit },
            dragxstart: {data: getSettings, func: dragxstart },
            dragx: {data: getSettings, func: dragx },
            dragxend: {data: getSettings, func: dragxend },
            dropxstart: {data: getSettings, func: dropxstart },
            dropxover: {data: getSettings, func: dropxover },
            dropxout: {data: getSettings, func: dropxout },
            dropx: {data: getSettings, func: function(){dropx.apply(this, arguments); __droppedOn(arguments, true);} },
            dropxselect: {data: getSettings, func: dropxselect },           
            dropxend: {data: getSettings, func: dropxend }
            }            
            , attr: {'id': model().id}
            , style: {'left': location().left +'px'
            ,'top': location().top +'px'
            ,'width': dimensions().width +'px'
            ,'height': dimensions().height +'px'
            
            }
            , fadeToggle: $parent.hideChildren
            , busy: isBusy" 
            class="drag drop account service circle {size: 100}"
            style="background-position:top; display:none;"
            ><!--,'backgroundImage': 'url(&#34;\/media\/img\/' + 'piggy35x35' + '.png&#34;)', 'mouseover': function(){ isHoveringOver(true)}, 'mouseout': function(){isHoveringOver(false)}-->
                
                <div class="wrapper">
                    <div class="floater">
                        <div class="center-container" >  
                            <div data-bind="text: model().accountNumber"></div>          
                            <div data-bind="text: model().balance"></div>
                        </div>
           
                    </div>
                </div>
                
            <!-- ko foreach: childViewModels-->
            <div data-bind="eventJq: {
            dragxselect: {data: getSettings, func: select },
            dragxinit: {data: getSettings, func: dragxinit },
            dragxstart: {data: getSettings, func: dragxstart },
            dragx: {data: getSettings, func: dragx },
            dragxend: {data: getSettings, func: dragxend },
            dropxstart: {data: getSettings, func: dropxstart },
            dropxover: {data: getSettings, func: dropxover },
            dropxout: {data: getSettings, func: dropxout },
            dropx: {data: getSettings, func: function(){dropx.apply(this, arguments); __droppedOn(arguments, true);} },
            dropxselect: {data: getSettings, func: dropxselect },           
            dropxend: {data: getSettings, func: dropxend }
            }
            , event: {'dblclick': function (data, e){ toggleRenderChildren(); e.cancelBubble = true; if (e.stopPropagation) e.stopPropagation(); return false}, dblclickBubble: false }
            , style: {'backgroundImage': icon.url,
            'left': location().left + icon.location.offset.x + 'px'
            ,'top': location().top +icon.location.offset.y + 'px'
            ,'width': dimensions().width +'px'
            ,'height': dimensions().height +'px'}
            , infoize: info
            " 
            class="drag drop circle" style="border:none; background-position:center;background-repeat:no-repeat;">
                
            </div>  
            
            <div data-bind=" onTop: childrenOnTop, eventJq: {
                    dragxselect: {data: getSettings, func: select },
                    dragxinit: {data: getSettings, func: dragxinit },
                    dragxstart: {data: getSettings, func: dragxstart },
                    dragx: {data: getSettings, func: dragx },
                    dragxend: {data: getSettings, func: dragxend },
                    dropxstart: {data: getSettings, func: dropxstart },
                    dropxover: {data: getSettings, func: dropxover },
                    dropxout: {data: getSettings, func: dropxout },
                    dropx: {data: getSettings, func: function(){dropx.apply(this, arguments); __droppedOn(arguments, true);} },
                    dropxselect: {data: getSettings, func: dropxselect },           
                    dropxend: {data: getSettings, func: dropxend }
                    }, visible: isChildrenVisible, style: {
            'left': childrenContainerPosition().x + 'px'
            ,'top': childrenContainerPosition().y + 'px'}
            " class="drag drop circle" style="display:none;width:100px;height:100px;">
                    <!-- ko foreach: accountChildrenContainerViewModel.childrenViewModels-->
                    <div data-bind="eventJq: {
                    dragxselect: {data: getSettings, func: select },
                    dragxinit: {data: getSettings, func: dragxinit },
                    dragxstart: {data: getSettings, func: dragxstart },
                    dragx: {data: getSettings, func: dragx },
                    dragxend: {data: getSettings, func: dragxend }
                    }, style: {'backgroundImage': icon.url,
                    'left': location().left + icon.location.offset.x + 'px'
                    ,'top': location().top +icon.location.offset.y + 'px'
                    ,'width': dimensions().width +'px'
                    ,'height': dimensions().height +'px'}, fadeOut: hide" class="drag drop circle" style="border:none; background-color:transparent; background-position:center;background-repeat:no-repeat;">

                    </div>
                <!-- /ko -->
                </div> 
                <!-- /ko -->
                
           </div>
           
           <!-- ko with: closeAccountVm-->
           <div data-bind="onTop: onTop, eventJq: {
            dragxselect: {data: getSettings, func: select },
            dragxinit: {data: getSettings, func: dragxinit },
            dragxstart: {data: getSettings, func: dragxstart },
            dragx: {data: getSettings, func: dragx },
            dragxend: {data: getSettings, func: dragxend },
            dropxstart: {data: getSettings, func: dropxstart },
            dropxover: {data: getSettings, func: dropxover },
            dropxout: {data: getSettings, func: dropxout },
            dropx: {data: getSettings, func: function(){dropx.apply(this, arguments); __droppedOn(arguments, true);} },
            dropxselect: {data: getSettings, func: dropxselect },           
            dropxend: {data: getSettings, func: dropxend }
            }, style: {'backgroundImage': icon.url}
            , fadeToggle: hideCloseForm" 
            style="display: none;position:absolute; left:60%; top:30%;width:400px;background-position: 50% 0%; background-repeat:no-repeat;padding:30px;" 
            class="drag drop entry-form center">
                <p>
                </p>
                <div 
                        class="" style="padding:5px 30px 30px 30px;">
                        <p>&nbsp;</p>
                    <span data-bind="text: model().accountNumber()"></span>          
                    <span data-bind="format: {value: model().balance, format: 'c'}" style="margin-left:50px"></span>
                    <hr style="width:250px;"/>
                        <p><!--
                        <div data-bind='foreach: model().missingFields()'>
                            <div data-bind='text: field'></div> 
                        </div>-->
 

                        </p>
                        
                
                </div>
                <div data-bind="visible: !isCurrentMemberAuthorizedToClose()" style="width:90%; float:left; left:10px; position:relative;">
                
	<div class="container3">
		<div class="container2">
			<div class="container1" style="background:#ff0000 url('/media/img/lock32x32.png') no-repeat right center">
                <div class="col1">&nbsp;</div>
                
                <div class="col2"><span data-bind="text: customer.fullName()"></span> is not authorized to close this account due to the following reason: <span data-bind="text: currentMemberNotAuthorizedToCloseReason"></span></div>
                
            </div>
        </div>
    </div>

    <div class="container3">
		<div class="container2">
			<div class="container1" style="background:#89ffa2 url('/media/img/lock_off32x32.png') no-repeat right center">
                <div class="col1">&nbsp;</div>
                
                <div class="col2"><a href="#" data-bind="click: close" class="">
                    Send
                </a> <span data-bind="text: customer.fullName() + ' ' + closureForms()[1].name"></span> 
                
                </div>
            </div>
        </div>
    </div>

    <div class="container3">
		<div class="container2">
			<div class="container1" style="background:#89ffa2 url('/media/img/future.png') no-repeat right center">
                <div class="col1">&nbsp;</div>
                
                <div class="col2">When the member has signer rights, come back and try again.
                </div>
            </div>
        </div>
    </div>

                <div class="clear"></div>

                </div>
                
                <div data-bind="visible: isCurrentMemberAuthorizedToClose()">
                
                <div class="leftcol-medium"><p>Reason for closing</p></div>
                <div class="clear"></div>
                <div class="leftcol-medium"><select data-bind="options: closeReasonCodes, optionsText: 'reasonCodeDisplayText', optionsCaption: 'Select...'"></select></div>
                <div class="clear"></div>

                
                <div data-bind="visible: otherPersonsWhoNeedToAuthorizeClosure().length > 0">
                <div class="fullcol-medium"><p>There are others on this account that need to approve the closure.  If you have recieved consent, please indicate below.</p></div>

                <div class="leftcol-medium"><p><u>Additional authorization</u> </p></div>
                <div class="clear"></div>
                <div class="fullcol-medium"><table border="0" style="width:100%">
                    <tr>
                    <th>Name</th>
                    <th>Signed</td>
                    <th>Override</th>
                    <td></td>
                    </tr>
                    <!-- ko foreach: otherPersonsWhoNeedToAuthorizeClosure-->
                    <tr>
                    <td><span data-bind="text:fullName()"></span></td>
                    <td><input type="checkbox" /></td>
                    <td><input type="checkbox" /></td>
                    <td><a href="#"  class="">
                    Send Form
                </a></td>
                    </tr>
                <!-- /ko -->
                </table></div>
                <div class="clear"></div>


                </div>


                <div data-bind="visible: showAutomatedPaymentShedulesHandling">
                <div class="fullcol-medium"><p>There are <span data-bind="text: model().paymentSchedules().length"></span> scheduled payments on this account that should be canceled or transferred to another account. <a href="#" data-bind="infoize: howToManualPaymentShedulesHandling">How?</a> </p></div>

                    
                </div>
                <div data-bind="visible: !showAutomatedPaymentShedulesHandling()">
                
                </div>

                </div>
            <a href="#" data-bind="click: close" class="button button-blue">
                <span>OK</span>
            </a>
            <a href="#" data-bind="click: function(){hideCloseForm(true);}" class="button button-blue">
                <span>Cancel</span>
            </a>
        </div>
        
                <!-- /ko -->
            







        <!-- ko with: transferVm -->
            
            <!-- ko with: calculatorVm-->
                <div  style="float:left;margin-left:8px;">
                <div data-bind="onTop: onTop, eventJq: {
            dragxselect: {data: getSettings, func: select },
            dragxinit: {data: getSettings, func: dragxinit },
            dragxstart: {data: getSettings, func: dragxstart },
            dragx: {data: getSettings, func: dragx },
            dragxend: {data: getSettings, func: dragxend },
            dropxstart: {data: getSettings, func: dropxstart },
            dropxover: {data: getSettings, func: dropxover },
            dropxout: {data: getSettings, func: dropxout },
            dropx: {data: getSettings, func: function(){dropx.apply(this, arguments); __droppedOn(arguments, true);} },
            dropxselect: {data: getSettings, func: dropxselect },           
            dropxend: {data: getSettings, func: dropxend }
            }
            , fadeToggle: show" class="drag drop amount calc" style="display:none;">



  
<div class="calc-entry">
<input type="text" data-bind="value: amount, valueUpdate: 'afterkeydown'" maxlength="40" name="Display"/>
</div>

<div class="clear"/>
     
  <div class="calc-button"><a href="#" class="button button-blue" name="seven"  data-bind="click: function(){calculator.addDigit.call(calculator, '7');}"><span> 7 </span></a></div>

  <div class="calc-button"><a href="#" class="button button-blue" name="eight"  data-bind="click: function(){calculator.addDigit.call(calculator, '8');}"><span> 8 </span></a></div>

  <div class="calc-button"><a href="#" class="button button-blue" name="nine"  data-bind="click: function(){calculator.addDigit.call(calculator, '9');}"><span> 9 </span></a></div>

  <div class="calc-button"><a href="#" class="button button-blue" name="mul"  data-bind="click: function(){calculator.operate.call(calculator, '*');}"><span>X</span></a></div>

<div class="clear"/>

  <div class="calc-button"><a href="#" class="button button-blue" name="four"  data-bind="click: function(){calculator.addDigit.call(calculator, '4');}"><span>4</span></a></div>

  <div class="calc-button"><a href="#" class="button button-blue" name="five"  data-bind="click: function(){calculator.addDigit.call(calculator, '5');}"><span>5</span></a></div>

  <div class="calc-button"><a href="#" class="button button-blue" name="six"  data-bind="click: function(){calculator.addDigit.call(calculator, '6');}"><span>6</span></a></div>
  <div class="calc-button"><a href="#" class="button button-blue" name="div"  data-bind="click: function(){calculator.operate.call(calculator, '/');}"><span>/</span></a></div>

<div class="clear"/>

  <div class="calc-button"><a href="#" class="button button-blue" name="one"  data-bind="click: function(){calculator.addDigit.call(calculator, '1');}"><span>1</span></a></div>

  <div class="calc-button"><a href="#" class="button button-blue" name="two"  data-bind="click: function(){calculator.addDigit.call(calculator, '2');}"><span>2</span></a></div>

  <div class="calc-button"><a href="#" class="button button-blue" name="three"  data-bind="click: function(){calculator.addDigit.call(calculator, '3');}"><span>3</span></a></div>
  <div class="calc-button"><a href="#" class="button button-blue" name="add"  data-bind="click: function(){calculator.operate.call(calculator, '+');}"><span>+</span></a></div>

<div class="clear"/>

  <div class="calc-button"><a href="#" class="button button-blue" name="plusmin"  data-bind="click: function(){calculator.plusMinus.call(calculator);}"><span>-/+</span></a></div>

  <div class="calc-button"><a href="#" class="button button-blue" name="one"  data-bind="click: function(){calculator.addDigit.call(calculator, '0');}"><span>0</span></a></div>

  <div class="calc-button"><a href="#" class="button button-blue" name="two"  data-bind="click: function(){calculator.dot.call(calculator);}"><span>.</span></a></div>
  <div class="calc-button"><a href="#" class="button button-blue" name="sub"  data-bind="click: function(){calculator.operate.call(calculator, '-');}"><span>-</span></a></div>

<div class="clear"/>
<div class="calc-button wide"><a href="#" class="button button-blue" name="AC"  data-bind="click: function(){calculator.allClear.call(calculator);} "><span class="wide">CLEAR</span></a></div>
  <div class="calc-button wide"><a href="#" class="button button-blue" name="result"  data-bind="click: function(){calculator.calculate.call(calculator);}"><span class="wide">=</span></a></div>
  <div class="clear"/>
</div></div>
<!-- /ko -->
            <div data-bind="onTop: onTop, eventJq: {
            dragxselect: {data: getSettings, func: select },
            dragxinit: {data: getSettings, func: dragxinit },
            dragxstart: {data: getSettings, func: dragxstart },
            dragx: {data: getSettings, func: dragx },
            dragxend: {data: getSettings, func: dragxend },
            dropxstart: {data: getSettings, func: dropxstart },
            dropxover: {data: getSettings, func: dropxover },
            dropxout: {data: getSettings, func: dropxout },
            dropx: {data: getSettings, func: function(){dropx.apply(this, arguments); __droppedOn(arguments, true);} },
            dropxselect: {data: getSettings, func: dropxselect },           
            dropxend: {data: getSettings, func: dropxend }
            }
            , fadeToggle: hideTransferForm" 
            style=";display: none;" 
            class="drag drop entry-form center transfer-form"> 
                        <div data-bind="foreach: moneyVms, fadeToggle: hideTransferForm""
            style="display: none; border:0px solid #354555; margin-bottom: 20px;background-color:transparent; padding: 30px; color:#ddd;border-radius:20px;-moz-border-radius: 20px;" 
            class="entry-form">
            
                <div data-bind="eventJq: {
            dragxselect: {data: getSettings, func: select },
            dragxinit: {data: getSettings, func: dragxinit },
            dragxstart: {data: getSettings, func: dragxstart },
            dragx: {data: getSettings, func: dragx },
            dragxend: {data: getSettings, func: dragxend } }
            , style: {'width': dimension().width +'px'
                    ,'height': dimension().height +'px'
                    ,'left': location().left +'px'
                    }" class="drag drop circle money center" style="top:20px;">
                <div class="money-container">
                    <span data-bind="text: '$' + amount()"></span>
                    <div>
                    <img src="/media/img/up16x16.png" alt="increase" style="cursor:pointer;" data-bind="click: increase" class="nolink"/>
                    <img src="/media/img/down16x16.png" alt="decrease" style="margin-right:2px;cursor:pointer;" data-bind="click: decrease" class="nolink"/>
                    </div>
                    
                 </div>
                </div>
                
            </div>
            
                        <div class="maincol center entry-form"><!-- begin main content area -->
				<!-- ko if: fromAccount() -->
			    <div class="leftcol"><!-- begin leftcol -->
				    <p data-bind="text: fromAccount().accountNumber()"></p>
                    <p data-bind="format: {value: fromAccountTransferPreviewAmount, format: 'c'}"></p>
                    <!-- ko with: calculatorVm-->
                    <div style="float:left; margin-top:20px;"><img alt="calculator" data-bind="event: {'dblclick': function(data, e){toggleShow(); e.cancelBubble = true; if (e.stopPropagation) e.stopPropagation(); return false}, dblclickBubble: false }" src="/media/img/calculator5.png" /></div>
                    <!-- /ko -->
			    </div><!-- end leftcol -->
				<!-- /ko -->
                <!-- ko if: toAccount() -->
			    <div class="rightcol"><!-- begin rightcol -->
				    <p data-bind="text: toAccount().accountNumber()"></p>
                    <p data-bind="format: {value: toAccountTransferPreviewAmount, format: 'c'}"></p>
			
			    </div><!-- end righttcol -->
			    <!-- /ko -->
			    <div class="centercol"><!-- begin centercol -->
				    <img data-bind="eventJq: {dropxstart: {data: getSettings, func: dropxstart },
            dropxover: {data: getSettings, func: dropxover },
            dropxout: {data: getSettings, func: dropxout },
            dropx: {data: getSettings, func: function(){dropx.apply(this, arguments); __droppedOn(arguments, true);} },
            dropxselect: {data: getSettings, func: dropxselect },           
            dropxend: {data: getSettings, func: dropxend }
            }" src="/media/img/transfer5_sm.png" alt="transfer" class="transfer-arrow amount" />
                    <div
                style="position: absolute;
top: 20px;
border-width: 0px;
margin-left: 8px;">
                
                <input type="text" style="width: 100px;
background-color: transparent;
border-width: 0px;" data-bind="value: amountOrDefault, event: {focus: function(){amountHasFocus(true);}, blur: function(){amountHasFocus(false);} }, valueUpdate: 'afterkeydown'" />
                
        </div>
			    </div><!-- end centercol -->
				

        <div data-bind="foreach: moneyVms" style="height:100px;">
                <!--<img data-bind="eventJq: {
            dragxselect: {data: getSettings, func: select },
            dragxinit: {data: getSettings, func: dragxinit },
            dragxstart: {data: getSettings, func: dragxstart },
            dragx: {data: getSettings, func: dragx },
            dragxend: {data: getSettings, func: dragxend } }
            , style: {
                    'left': location().left - 20  +'px'
                    ,'top': ((index % 2) * 50) +70 +'px'
                    }, attr: {'src': '/media/img/' + amount() + '-dollars75x32.png', alt: amount()}"
                     class="drag drop" style="border:none;top:20px;" />
                -->
            </div>

        

            <a href="#" data-bind="click: transfer" class="button button-blue">
                <span>OK</span>
            </a>
            <a href="#" data-bind="click: function(){changeVisibility(true);}" class="button button-blue">
                <span>Cancel</span>
            </a>
		    </div><!-- end main content area -->
			        
  <!--<div class="calc-button"><a href="#" class="button button-blue" name="clear"  data-bind="click: function(){calculator.clear.call(calculator);} "><span>C</span></a></div>


<div class="clear"/>

  
<div class="clear"/>

  <div class="calc-button"><a href="#" class="button button-blue" name="exp"  data-bind="click: function(){calculator.doExponent.call(calculator);}"><span>EXP</span></a></div>

<div class="clear"/>-->





                                 <!--end right panel-->

                         <!--END OUTER MARGIN CALC------->
            <!--<div style="float:left; position:relative;height:100%; border:0px solid #354555;width:90px;background-color:transparent; color:#ddd;border-radius:20px;-moz-border-radius: 20px;" 
            class="entry-form">
                <div data-bind="foreach: moneyVms" style="height:100px;">
                    <div  data-bind="eventJq: {
                dragxselect: {data: getSettings, func: select },
                dragxinit: {data: getSettings, func: dragxinit },
                dragxstart: {data: getSettings, func: dragxstart },
                dragx: {data: getSettings, func: dragx },
                dragxend: {data: getSettings, func: dragxend } }
                , style: {
                        'left': 5  +'px'
                        ,'top': ((index) * 35) +20 +'px'
                        }, event: { mouseover: showIncrementing, mouseout: hideIncrementing }"
                        class="drag drop" style="border:none;top:20px;">
                    <img data-bind="attr: {'src': '/media/img/' + model().amount() + '-dollars75x32.png', alt: amount()}"
                          />
                    <div data-bind="visible: isIncrementingVisible, style: {
                        'left': -35  +'px'
                        
                        }" style="position:absolute;top:-17px;">
                        <img src="/media/img/upHead.png" alt="increase" style="cursor:pointer;" data-bind="click: increase" class="nolink"/>
                        
                    </div>
                    <div data-bind="visible: isIncrementingVisible, style: {
                        'left': -35  +'px'
                        
                        }" style="position:absolute;top:17px;">
                        <img src="/media/img/downHead.png" alt="decrease" style="cursor:pointer;" data-bind="click: decrease" class="nolink"/>
                   
                    </div>
                    </div>
                </div>

            </div>-->
        </div>
        <!-- /ko -->
        </div>

            </div>
            <!-- /ko -->
        <!-- ko with: customerCampaignsViewModel-->
            <div data-bind="eventJq: {
            dragxselect: {data: getSettings, func: select },
            dragxinit: {data: getSettings, func: dragxinit },
            dragxstart: {data: getSettings, func: dragxstart },
            dragx: {data: getSettings, func: dragx },
            dragxend: {data: getSettings, func: dragxend },
            dropxstart: {data: getSettings, func: dropxstart },
            dropxover: {data: getSettings, func: dropxover },
            dropxout: {data: getSettings, func: dropxout },
            dropx: {data: getSettings, func: function(){dropx.apply(this, arguments); __droppedOn(arguments, true);} },
            dropxselect: {data: getSettings, func: dropxselect },           
            dropxend: {data: getSettings, func: dropxend }
            }
            ,
            fadeToggle: $parent.hideChildren
            , style: {'left': location().left +'px'
            ,'top': location().top +'px'
            ,'width': dimensions().width +'px'
            ,'height': dimensions().height +'px'
            ,'backgroundImage': icon.url}
            , busy: isBusy
            , infoize: $parent.campaignsInfo
            , event: {'dblclick': function(data, e){dblclick(data, e); e.cancelBubble = true; if (e.stopPropagation) e.stopPropagation(); return false}, dblclickBubble: false }"
             
            class="drag drop service circle"             
            style='display:none'>
            </div>
            <!-- /ko -->
        <!-- ko with: customerContactsViewModel-->
            <div data-bind="eventJq: {
            dragxselect: {data: getSettings, func: select },
            dragxinit: {data: getSettings, func: dragxinit },
            dragxstart: {data: getSettings, func: dragxstart },
            dragx: {data: getSettings, func: dragx },
            dragxend: {data: getSettings, func: dragxend },
            dropxstart: {data: getSettings, func: dropxstart },
            dropxover: {data: getSettings, func: dropxover },
            dropxout: {data: getSettings, func: dropxout },
            dropx: {data: getSettings, func: function(){dropx.apply(this, arguments); __droppedOn(arguments, true);} },
            dropxselect: {data: getSettings, func: dropxselect },           
            dropxend: {data: getSettings, func: dropxend }
            }
            ,
            fadeToggle: $parent.hideChildren
            , style: {'left': location().left +'px'
            ,'top': location().top +'px'
            ,'width': dimensions().width +'px'
            ,'height': dimensions().height +'px'
            ,'backgroundImage': icon.url}
            , busy: isBusy
            , infoize: $parent.contactsInfo
            , event: {'dblclick': function(data, e){dblclick(data, e); e.cancelBubble = true; if (e.stopPropagation) e.stopPropagation(); return false}, dblclickBubble: false }"
             
            class="drag drop service circle"             
            style='display:none'>
            </div>
            <!-- /ko -->
        <!-- ko with: customerInteractionsViewModel-->
            <div data-bind="eventJq: {
            dragxselect: {data: getSettings, func: select },
            dragxinit: {data: getSettings, func: dragxinit },
            dragxstart: {data: getSettings, func: dragxstart },
            dragx: {data: getSettings, func: dragx },
            dragxend: {data: getSettings, func: dragxend },
            dropxstart: {data: getSettings, func: dropxstart },
            dropxover: {data: getSettings, func: dropxover },
            dropxout: {data: getSettings, func: dropxout },
            dropx: {data: getSettings, func: function(){dropx.apply(this, arguments); __droppedOn(arguments, true);} },
            dropxselect: {data: getSettings, func: dropxselect },           
            dropxend: {data: getSettings, func: dropxend }
            }
            ,
            fadeToggle: $parent.hideChildren
            , style: {'left': location().left +'px'
            ,'top': location().top +'px'
            ,'width': dimensions().width +'px'
            ,'height': dimensions().height +'px'
            ,'backgroundImage': icon.url}
            , busy: isBusy
            , infoize: $parent.interactionsInfo
            , event: {'dblclick': function(data, e){dblclick(data, e); e.cancelBubble = true; if (e.stopPropagation) e.stopPropagation(); return false}, dblclickBubble: false }"
             
            class="drag drop service circle"             
            style='display:none'>
            </div>
            <!-- /ko -->

    </div>