<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
<head>
<script class="jsbin" src="http://ajax.googleapis.com/ajax/libs/jquery/1.5.2/jquery.min.js"></script>
<meta charset=utf-8 />
<title>JS Bin</title>
<!--[if IE]>
  <script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
<![endif]-->
<style>
  article, aside, figure, footer, header, hgroup,
  menu, nav, section { display: block; }
  .circle {position:absolute; background-color: black;-moz-border-radius: 50%;border-radius: 50%;}
  .circle2 {background-color: pink;}
  .center {position:absolute; background-color: purple;-moz-border-radius: 50%;border-radius: 50%;}
  
</style>
    
</head>
<body style="background-color:ThreeDDarkShadow;">
  <div id="outer" class="circle" style="background-color:pink"></div>
    <div id="canvas"  style="position:absolute;left:50%;top:50%;background-color:lightyellow">
      
    </div>
 
  <p id="hello">Hello World</p>
  <ul id="log" style="position:absolute;left:50px;"></ul>

  <script>

      $(function () {

          var $log = $("#log");
          function log(message) {
              $log.prepend("<li>" + message + "</li>");
          }

          function sortNumber(a, b) {
              //alert(b[0] - a[0]);
              return a[0] < b[0] ? -1 : a[0] == b[0] ? 0 : 1;
          }



          function Point(x, y) {
              this.x = x;
              this.y = y;
          }

          // Contour object
          function Polygon(points) {

              this.pts = points || []; // an array of Point objects defining the contour

              var minX;
              var minY;
              var maxX;
              var maxY;

              var cnt = this.pts.length;

              for (var i = 0; i < cnt; i++) {
                  var pt = this.pts[i];

                  if (undefined === minX || pt.x < minX)
                      minX = x;

                  if (undefined === minY || pt.y < minY)
                      minY = y;

              }

              minX = Math.abs(Math.min(minX, 0));
              minY = Math.abs(Math.min(minY, 0));

              //this.offset = { x: minX, y: minY };
              this.offset = { x: 0, y: 0 };

              var normalizedpts = [];

              for (var j = 0; j < this.pts.length; j++) {
                  var pt = this.pts[j];

                  //                  pt.x += minX;
                  //                  pt.y += minY;
                  //normalizedpts.push({ x: pt.x + minX, y: pt.y + minY });
                  normalizedpts.push({ x: pt.x + 0, y: pt.y + 0 });
                  //                  this.pts[j].x += minX;
                  //                  this.pts[j].y += minY;

                  //log('x: ' + this.pts[j].x + ' y: ' + this.pts[j].y);
              }
              this.normalizedpts = normalizedpts;
          }


          Polygon.prototype.area = function () {
              var area = 0;
              var pts = this.normalizedpts;
              var nPts = pts.length;
              var j = nPts - 1;
              var p1; var p2;

              for (var i = 0; i < nPts; j = i++) {
                  p1 = pts[i]; p2 = pts[j];
                  area += p1.x * p2.y;
                  area -= p1.y * p2.x;
              }
              area /= 2;

              return area;
          };

          Polygon.prototype.center = function () {
              var pts = this.normalizedpts;
              var nPts = pts.length;
              var x = 0; var y = 0;
              var f;
              var j = nPts - 1;
              var p1; var p2, product1, product2;

              if (nPts === 1) {
                  return new Point(0, 0);
              }

              if (nPts === 2) {
                  return new Point((pts[0].x + pts[1].x) / 2, (pts[0].y + pts[1].y) / 2);
              }

              for (var i = 0; i < nPts; j = i++) {
                  p1 = pts[i]; p2 = pts[j];
                  //product1 = 
                  f = p1.x * p2.y - p2.x * p1.y;
                  x += (p1.x + p2.x) * f;
                  y += (p1.y + p2.y) * f;
              }

              f = this.area() * 6;

              return new Point((x / f) - this.offset.x, (y / f) - this.offset.y);
          };

          Polygon.prototype.radius = function (offsetX, offsetY) {
              //alert('x: ');
              var printArr = this.normalizedpts;
              //var nPts = pts.length;
              //alert('x: ');
              var maxDist = 0;
              var dist;
              var outerPoint;
              var innterPoint;
              var side1;
              var side2;

              for (var o = 0; o < printArr.length; o++) {
                  outerPoint = printArr[o];
                  for (var b = 0; b < printArr.length; b++) {
                      innterPoint = printArr[b];
                      if (innterPoint === outerPoint)
                          continue;

                      side1 = Math.abs(innterPoint.x - outerPoint.x) + (offsetX || 0);
                      side2 = Math.abs(innterPoint.y - outerPoint.y) + (offsetX || 0);

                      dist = (side1 * side1) + (side2 * side2);

                      if (dist > maxDist)
                          maxDist = dist;
                  }
              }
              return Math.sqrt(maxDist) / 2;
          };








          var arr = []; //[0,1,2,3,4,5,6,7,8,9];

          var num = 6;

          for (var z = 0; z < num; z++) {
              arr.push(z);
          }


          var diameter = 80;
          var degree = 0;
          var degreeStep = ((360 - (360 / (arr.length * 2))) / (arr.length * 2)); // + (diameter/100 + arr.length);
          //alert(degreeStep );

          var mX = diameter;
          var mY = diameter;

          var $canvas = $('#canvas');

          var minX;
          var minY;
          var maxX;
          var maxY;

          var printArr = [];
          var pointArr = [];
          var angle;
          var x; // = (Math.cos(angle))* diameter; //  * (((num+2)/4) * diameter);//
          var y; // = (Math.sin(angle))* diameter; // * (((num+2)/4) * diameter);//

          for (var i = 0; i < (arr.length * 2); i++) {

              degree += degreeStep;
              angle = Math.PI * degree / 180.0;
              x = (Math.cos(angle)) * (((num < 4 ? num + 1 : num) / 2) * diameter); //* diameter; //
              y = (Math.sin(angle)) * (((num < 4 ? num + 1 : num) / 2) * diameter); //* diameter; //

              //log('x: ' + x + ' y: ' + y);

              printArr.push({ x: x, y: y });

              //alert(pointArr );
              //pointArr.push([x,y]);


              if (undefined === minX || x < minX)
                  minX = x;


              if (undefined === maxX || x > maxX)
                  maxX = x;

              if (undefined === minY || y < minY)
                  minY = y;

              if (undefined === maxY || y > maxY)
                  maxY = y;

              //child.RenderTransform = new RotateTransform(degree, 0, 0);   
              //child.Arrange(new Rect(mX + x, mY + y, child.DesiredSize.Width, child.DesiredSize.Height));   

          }

          //alert('x: ');

          var width = Math.abs(minX) + Math.abs(maxX) + diameter;
          var height = Math.abs(minY) + Math.abs(maxY) + diameter;

          //var cRad = Math.sqrt(maxDist); //Math.sqrt(side1 *side1 + side2 *side2 );

          var maxDim = Math.max(width, height);

          $canvas.width(maxDim);

          $canvas.height(maxDim);
          $canvas.addClass('circle');

          //alert('x: ');
          /*
  
          var polygon = [
          {'x':770, 'y':400},
          {'x':529, 'y':643},
          {'x':320, 'y':494},
          {'x':424, 'y':381},
          {'x':459, 'y':369}
          ];*/

          var con = new Polygon(printArr);
          var center = con.center();
          var radius = con.radius(diameter, diameter);


          $canvas.width(radius * 2);

          $canvas.height(radius * 2);
          //$canvas.addClass('circle');


          //log('center.x: ' + center.x + ' center.y: ' + center.y + ' radius: ' + radius);
          //alert('radius: ' + radius );

          var addX = radius; //Math.abs(Math.min(0, minX));//cRad /2;//
          var addY = radius; //Math.abs(Math.min(0, minY));//cRad /2;//

          var el = document.createElement("div");
          var $el = $(el);
          //          $el.css({ left: (center.x + addX) - radius, top: (center.y + addY) - radius, width: radius * 2, height: radius * 2 });
          //          $el.addClass('circle');
          //          $el.addClass('circle2');
          //          $canvas.append($el);


          addX = Math.abs(center.x - ($canvas.width() / 2));
          addY = Math.abs(center.y - ($canvas.height() / 2));

          for (var p = 0; p < arr.length; p++) {
              var obj = printArr[p];

              var hyp = Math.sqrt((Math.abs(obj.x - center.x) * Math.abs(obj.x - center.x)) + (Math.abs(obj.y - center.y) * Math.abs(obj.y - center.y)));

              //log('x: ' + obj.x + ' y: ' + obj.y + ' hyp: ' + hyp);


              var left = obj.x + addX; // +(2*mX);
              var top = obj.y + addY; // +(2*mY );

              //log('left : ' + left + ' top : ' + top);

              var el = document.createElement("div");
              var $el = $(el);
              //$el.css({ left: left - (diameter / 2), top: top - (diameter / 2), width: diameter, height: diameter });
              //$el.css({ left: obj.x, top: obj.y, width: diameter, height: diameter });
              $el.css({ left: left - diameter / 2, top: top - diameter / 2, width: diameter, height: diameter });
              $el.addClass('circle');
              $canvas.append($el);
          }


          el = document.createElement("div");
          $el = $(el);
          //$el.css({ left: (center.x) - (diameter / 2) + addX, top: center.y - (diameter / 2) + addY, width: 2, height: 200 });
          $el.css({ left: (center.x) - diameter / 2, top: center.y, width: 2, height: 200 });
          $el.addClass('center');
          $canvas.append($el);

      });
  
  </script>
</body>
</html>

